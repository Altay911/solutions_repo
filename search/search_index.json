{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Projectile Motion: Range vs. Launch Angle Analysis Theoretical Foundations Basic Equations of Motion For a projectile launched from ground level ( \\(y_0 = 0\\) ): Horizontal motion: $$ x(t) = v_0 \\cos\\theta \\cdot t $$ Vertical motion: $$ y(t) = v_0 \\sin\\theta \\cdot t - \\frac{1}{2}gt^2 $$ Key Results Time of flight: $$ T = \\frac{2v_0 \\sin\\theta}{g} $$ Maximum range (ground level): $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ Maximum height: $$ H = \\frac{v_0^2 \\sin^2\\theta}{2g} $$ Range Analysis Optimal Angle For \\(y_0 = 0\\) , maximum range occurs at \\(\\theta = 45\u00b0\\) For \\(y_0 > 0\\) , optimal angle decreases below 45\u00b0 For \\(y_0 < 0\\) (below launch level), optimal angle increases above 45\u00b0 Parameter Dependence Parameter Effect on Range \\(v_0\\) Increases quadratically \\(\\theta\\) Peaks at optimal angle \\(g\\) Inversely proportional \\(y_0\\) Increases with height Practical Applications Sports: Optimizing throw angles in javelin, shot put Military: Artillery trajectory calculations Space: Suborbital rocket trajectories Engineering: Water fountain designs Limitations of Ideal Model Air resistance: Significant at high velocities Wind effects: Lateral displacement Spin: Magnus effect in sports balls Variations in g: For long-range projectiles Earth's curvature: For ICBMs Visualization Concepts Range vs. Angle curve: Parabolic shape peaking at optimal angle Symmetric about 45\u00b0 for ground level Trajectory plots: Show height vs. distance Compare different launch angles Parameter sensitivity: How range changes with \\(v_0\\) Effect of initial height \\(y_0\\)","title":"Projectile Motion: Range vs. Launch Angle Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#projectile-motion-range-vs-launch-angle-analysis","text":"","title":"Projectile Motion: Range vs. Launch Angle Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#theoretical-foundations","text":"","title":"Theoretical Foundations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#basic-equations-of-motion","text":"For a projectile launched from ground level ( \\(y_0 = 0\\) ): Horizontal motion: $$ x(t) = v_0 \\cos\\theta \\cdot t $$ Vertical motion: $$ y(t) = v_0 \\sin\\theta \\cdot t - \\frac{1}{2}gt^2 $$","title":"Basic Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#key-results","text":"Time of flight: $$ T = \\frac{2v_0 \\sin\\theta}{g} $$ Maximum range (ground level): $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ Maximum height: $$ H = \\frac{v_0^2 \\sin^2\\theta}{2g} $$","title":"Key Results"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-analysis","text":"","title":"Range Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#optimal-angle","text":"For \\(y_0 = 0\\) , maximum range occurs at \\(\\theta = 45\u00b0\\) For \\(y_0 > 0\\) , optimal angle decreases below 45\u00b0 For \\(y_0 < 0\\) (below launch level), optimal angle increases above 45\u00b0","title":"Optimal Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#parameter-dependence","text":"Parameter Effect on Range \\(v_0\\) Increases quadratically \\(\\theta\\) Peaks at optimal angle \\(g\\) Inversely proportional \\(y_0\\) Increases with height","title":"Parameter Dependence"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#practical-applications","text":"Sports: Optimizing throw angles in javelin, shot put Military: Artillery trajectory calculations Space: Suborbital rocket trajectories Engineering: Water fountain designs","title":"Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#limitations-of-ideal-model","text":"Air resistance: Significant at high velocities Wind effects: Lateral displacement Spin: Magnus effect in sports balls Variations in g: For long-range projectiles Earth's curvature: For ICBMs","title":"Limitations of Ideal Model"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#visualization-concepts","text":"Range vs. Angle curve: Parabolic shape peaking at optimal angle Symmetric about 45\u00b0 for ground level Trajectory plots: Show height vs. distance Compare different launch angles Parameter sensitivity: How range changes with \\(v_0\\) Effect of initial height \\(y_0\\)","title":"Visualization Concepts"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Forced Damped Pendulum Dynamics Theoretical Foundations Governing Equation The forced damped pendulum is described by: \\[ \\frac{d^2\\theta}{dt^2} + \\frac{b}{m}\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin\\theta = \\frac{F_d}{mL}\\cos(\\omega_d t) \\] Where: - \\(\\theta\\) : Angular displacement - \\(b\\) : Damping coefficient - \\(m\\) : Mass of bob - \\(L\\) : Length of rod - \\(g\\) : Gravitational acceleration - \\(F_d\\) : Driving force amplitude - \\(\\omega_d\\) : Driving frequency Small Angle Approximation For \\(\\theta \\ll 1\\) radian ( \\(\\sin\\theta \\approx \\theta\\) ): \\[ \\frac{d^2\\theta}{dt^2} + 2\\beta\\frac{d\\theta}{dt} + \\omega_0^2\\theta = A\\cos(\\omega_d t) \\] Where: - \\(\\beta = b/2m\\) : Damping parameter - \\(\\omega_0 = \\sqrt{g/L}\\) : Natural frequency - \\(A = F_d/mL\\) : Driving amplitude Resonance Conditions Amplitude Resonance: Occurs at driving frequency: $$ \\omega_{amp} = \\sqrt{\\omega_0^2 - 2\\beta^2} $$ Velocity Resonance: Occurs exactly at \\(\\omega_0\\) Dynamic Behavior Analysis Parameter Space Overview Parameter Effect on System \\(\\beta\\) (Damping) Higher \\(\\beta\\) reduces oscillation amplitude and widens resonance peak \\(A\\) (Drive Amplitude) Higher \\(A\\) increases response amplitude and can induce chaos \\(\\omega_d/\\omega_0\\) (Frequency Ratio) Determines resonance and synchronization Characteristic Regimes Underdamped ( \\(\\beta < \\omega_0\\) ): Transient oscillations before settling to driven motion Clear resonance peak Critically Damped ( \\(\\beta = \\omega_0\\) ): Fastest return to equilibrium without oscillation Overdamped ( \\(\\beta > \\omega_0\\) ): Slow return to equilibrium Nonlinear Regime (Large \\(\\theta\\) ): Potential for chaotic behavior Period doubling routes to chaos Practical Applications Structural Engineering: Bridge oscillations in wind Building response to earthquakes Energy Harvesting: Optimizing pendulum-based wave energy converters Timekeeping: Precision clock mechanisms Biological Systems: Limb motion during walking Numerical Analysis Approach Key Visualizations Time Series: Angular displacement vs time Velocity vs time Phase Space: \\(\\dot{\\theta}\\) vs \\(\\theta\\) Poincar\u00e9 Sections: Stroboscopic sampling at driving period Bifurcation Diagrams: Behavior vs control parameter (e.g., \\(F_d\\) ) Numerical Considerations Integration Methods: Runge-Kutta (4th order recommended) Small time steps for chaotic regimes Initial Conditions: Important in nonlinear regimes May need to discard transient Model Limitations Idealized Damping: Real systems often have nonlinear damping Point Mass Assumption: Neglects distributed mass effects Rigid Rod: Real pendulums have flexure 2D Motion: Real pendulums can exhibit 3D motion Extensions Nonlinear Damping: $$ \\text{Add } \\mu \\dot{\\theta}^2 \\text{ term} $$ Parametric Driving: $$ \\text{Modify } L = L_0 + \\Delta L\\cos(\\omega_p t) $$ Double Pendulum: Coupled oscillators Enhanced chaotic behavior Analytical Solutions (Small Angle) Steady-State Solution \\[ \\theta(t) = \\theta_0\\cos(\\omega_d t - \\phi) \\] Where: - Amplitude: $$ \\theta_0 = \\frac{A}{\\sqrt{(\\omega_0^2-\\omega_d^2)^2 + (2\\beta\\omega_d)^2}} $$ - Phase lag: $$ \\phi = \\tan^{-1}\\left(\\frac{2\\beta\\omega_d}{\\omega_0^2-\\omega_d^2}\\right) $$ Quality Factor \\[ Q = \\frac{\\omega_0}{2\\beta} \\]","title":"Forced Damped Pendulum Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#forced-damped-pendulum-dynamics","text":"","title":"Forced Damped Pendulum Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#theoretical-foundations","text":"","title":"Theoretical Foundations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#governing-equation","text":"The forced damped pendulum is described by: \\[ \\frac{d^2\\theta}{dt^2} + \\frac{b}{m}\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin\\theta = \\frac{F_d}{mL}\\cos(\\omega_d t) \\] Where: - \\(\\theta\\) : Angular displacement - \\(b\\) : Damping coefficient - \\(m\\) : Mass of bob - \\(L\\) : Length of rod - \\(g\\) : Gravitational acceleration - \\(F_d\\) : Driving force amplitude - \\(\\omega_d\\) : Driving frequency","title":"Governing Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For \\(\\theta \\ll 1\\) radian ( \\(\\sin\\theta \\approx \\theta\\) ): \\[ \\frac{d^2\\theta}{dt^2} + 2\\beta\\frac{d\\theta}{dt} + \\omega_0^2\\theta = A\\cos(\\omega_d t) \\] Where: - \\(\\beta = b/2m\\) : Damping parameter - \\(\\omega_0 = \\sqrt{g/L}\\) : Natural frequency - \\(A = F_d/mL\\) : Driving amplitude","title":"Small Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-conditions","text":"Amplitude Resonance: Occurs at driving frequency: $$ \\omega_{amp} = \\sqrt{\\omega_0^2 - 2\\beta^2} $$ Velocity Resonance: Occurs exactly at \\(\\omega_0\\)","title":"Resonance Conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#dynamic-behavior-analysis","text":"","title":"Dynamic Behavior Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameter-space-overview","text":"Parameter Effect on System \\(\\beta\\) (Damping) Higher \\(\\beta\\) reduces oscillation amplitude and widens resonance peak \\(A\\) (Drive Amplitude) Higher \\(A\\) increases response amplitude and can induce chaos \\(\\omega_d/\\omega_0\\) (Frequency Ratio) Determines resonance and synchronization","title":"Parameter Space Overview"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#characteristic-regimes","text":"Underdamped ( \\(\\beta < \\omega_0\\) ): Transient oscillations before settling to driven motion Clear resonance peak Critically Damped ( \\(\\beta = \\omega_0\\) ): Fastest return to equilibrium without oscillation Overdamped ( \\(\\beta > \\omega_0\\) ): Slow return to equilibrium Nonlinear Regime (Large \\(\\theta\\) ): Potential for chaotic behavior Period doubling routes to chaos","title":"Characteristic Regimes"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#practical-applications","text":"Structural Engineering: Bridge oscillations in wind Building response to earthquakes Energy Harvesting: Optimizing pendulum-based wave energy converters Timekeeping: Precision clock mechanisms Biological Systems: Limb motion during walking","title":"Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#numerical-analysis-approach","text":"","title":"Numerical Analysis Approach"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#key-visualizations","text":"Time Series: Angular displacement vs time Velocity vs time Phase Space: \\(\\dot{\\theta}\\) vs \\(\\theta\\) Poincar\u00e9 Sections: Stroboscopic sampling at driving period Bifurcation Diagrams: Behavior vs control parameter (e.g., \\(F_d\\) )","title":"Key Visualizations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#numerical-considerations","text":"Integration Methods: Runge-Kutta (4th order recommended) Small time steps for chaotic regimes Initial Conditions: Important in nonlinear regimes May need to discard transient","title":"Numerical Considerations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#model-limitations","text":"Idealized Damping: Real systems often have nonlinear damping Point Mass Assumption: Neglects distributed mass effects Rigid Rod: Real pendulums have flexure 2D Motion: Real pendulums can exhibit 3D motion","title":"Model Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#extensions","text":"Nonlinear Damping: $$ \\text{Add } \\mu \\dot{\\theta}^2 \\text{ term} $$ Parametric Driving: $$ \\text{Modify } L = L_0 + \\Delta L\\cos(\\omega_p t) $$ Double Pendulum: Coupled oscillators Enhanced chaotic behavior","title":"Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#analytical-solutions-small-angle","text":"","title":"Analytical Solutions (Small Angle)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#steady-state-solution","text":"\\[ \\theta(t) = \\theta_0\\cos(\\omega_d t - \\phi) \\] Where: - Amplitude: $$ \\theta_0 = \\frac{A}{\\sqrt{(\\omega_0^2-\\omega_d^2)^2 + (2\\beta\\omega_d)^2}} $$ - Phase lag: $$ \\phi = \\tan^{-1}\\left(\\frac{2\\beta\\omega_d}{\\omega_0^2-\\omega_d^2}\\right) $$","title":"Steady-State Solution"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#quality-factor","text":"\\[ Q = \\frac{\\omega_0}{2\\beta} \\]","title":"Quality Factor"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Kepler's Third Law: Orbital Period and Radius Theoretical Foundations Derivation of Kepler's Third Law For a circular orbit with: - Orbital radius \\(r\\) - Orbital period \\(T\\) - Central mass \\(M\\) - Orbiting mass \\(m\\) (where \\(m \\ll M\\) ) Centripetal force = Gravitational force: \\[ \\frac{mv^2}{r} = \\frac{GMm}{r^2} \\] Orbital velocity: \\[ v = \\frac{2\\pi r}{T} \\] Substituting gives Kepler's Third Law: \\[ T^2 = \\left( \\frac{4\\pi^2}{GM} \\right) r^3 \\] Key Implications Mass Determination: $$ M = \\frac{4\\pi^2 r^3}{GT^2} $$ Scale Invariance: The ratio \\(T^2/r^3\\) is constant for all bodies orbiting the same mass Generalization to Ellipses: Replace \\(r\\) with semi-major axis \\(a\\) for elliptical orbits Solar System Examples Body Orbital Radius (AU) Period (years) \\(T^2/a^3\\) (yr\u00b2/AU\u00b3) Mercury 0.387 0.241 1.000 Venus 0.723 0.615 0.999 Earth 1.000 1.000 1.000 Mars 1.524 1.881 1.000 Jupiter 5.203 11.86 0.999 Data confirms the constant ratio predicted by Kepler Computational Verification Circular Orbit Simulation Approach Numerical Integration: Solve the equations of motion: $$ \\frac{d^2\\mathbf{r}}{dt^2} = -\\frac{GM}{r^3}\\mathbf{r} $$ Verification Steps: Simulate orbits with varying \\(r\\) Measure resulting periods \\(T\\) Plot \\(T^2\\) vs \\(r^3\\) to verify linearity Expected Results Orbit Visualization: Perfectly circular trajectories Constant orbital velocity Kepler Verification Plot: Straight line on \\(T^2\\) vs \\(r^3\\) graph Slope = \\(4\\pi^2/GM\\) Extensions to Real Systems Elliptical Orbits Modified Law: $$ T^2 = \\left( \\frac{4\\pi^2}{GM} \\right) a^3 $$ Where \\(a\\) is semi-major axis Eccentricity Effects: Period depends only on \\(a\\) , not eccentricity Velocity varies throughout orbit Binary Systems For comparable masses \\(M_1\\) and \\(M_2\\) : $$ T^2 = \\frac{4\\pi^2 a^3}{G(M_1+M_2)} $$ Practical Applications Exoplanet Detection: Measure star's wobble period to determine planet's orbital distance Satellite Deployment: Calculate geostationary orbit radius (~42,164 km) Galactic Dynamics: Estimate mass distribution in galaxies Limitations Perturbation Effects: Multi-body systems deviate from ideal law Relativistic Corrections: Needed for orbits close to massive objects Non-Point Masses: Tidal forces and oblateness affect orbits","title":"Kepler's Third Law: Orbital Period and Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#keplers-third-law-orbital-period-and-radius","text":"","title":"Kepler's Third Law: Orbital Period and Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#theoretical-foundations","text":"","title":"Theoretical Foundations"},{"location":"1%20Physics/2%20Gravity/Problem_1/#derivation-of-keplers-third-law","text":"For a circular orbit with: - Orbital radius \\(r\\) - Orbital period \\(T\\) - Central mass \\(M\\) - Orbiting mass \\(m\\) (where \\(m \\ll M\\) ) Centripetal force = Gravitational force: \\[ \\frac{mv^2}{r} = \\frac{GMm}{r^2} \\] Orbital velocity: \\[ v = \\frac{2\\pi r}{T} \\] Substituting gives Kepler's Third Law: \\[ T^2 = \\left( \\frac{4\\pi^2}{GM} \\right) r^3 \\]","title":"Derivation of Kepler's Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#key-implications","text":"Mass Determination: $$ M = \\frac{4\\pi^2 r^3}{GT^2} $$ Scale Invariance: The ratio \\(T^2/r^3\\) is constant for all bodies orbiting the same mass Generalization to Ellipses: Replace \\(r\\) with semi-major axis \\(a\\) for elliptical orbits","title":"Key Implications"},{"location":"1%20Physics/2%20Gravity/Problem_1/#solar-system-examples","text":"Body Orbital Radius (AU) Period (years) \\(T^2/a^3\\) (yr\u00b2/AU\u00b3) Mercury 0.387 0.241 1.000 Venus 0.723 0.615 0.999 Earth 1.000 1.000 1.000 Mars 1.524 1.881 1.000 Jupiter 5.203 11.86 0.999 Data confirms the constant ratio predicted by Kepler","title":"Solar System Examples"},{"location":"1%20Physics/2%20Gravity/Problem_1/#computational-verification","text":"","title":"Computational Verification"},{"location":"1%20Physics/2%20Gravity/Problem_1/#circular-orbit-simulation-approach","text":"Numerical Integration: Solve the equations of motion: $$ \\frac{d^2\\mathbf{r}}{dt^2} = -\\frac{GM}{r^3}\\mathbf{r} $$ Verification Steps: Simulate orbits with varying \\(r\\) Measure resulting periods \\(T\\) Plot \\(T^2\\) vs \\(r^3\\) to verify linearity","title":"Circular Orbit Simulation Approach"},{"location":"1%20Physics/2%20Gravity/Problem_1/#expected-results","text":"Orbit Visualization: Perfectly circular trajectories Constant orbital velocity Kepler Verification Plot: Straight line on \\(T^2\\) vs \\(r^3\\) graph Slope = \\(4\\pi^2/GM\\)","title":"Expected Results"},{"location":"1%20Physics/2%20Gravity/Problem_1/#extensions-to-real-systems","text":"","title":"Extensions to Real Systems"},{"location":"1%20Physics/2%20Gravity/Problem_1/#elliptical-orbits","text":"Modified Law: $$ T^2 = \\left( \\frac{4\\pi^2}{GM} \\right) a^3 $$ Where \\(a\\) is semi-major axis Eccentricity Effects: Period depends only on \\(a\\) , not eccentricity Velocity varies throughout orbit","title":"Elliptical Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#binary-systems","text":"For comparable masses \\(M_1\\) and \\(M_2\\) : $$ T^2 = \\frac{4\\pi^2 a^3}{G(M_1+M_2)} $$","title":"Binary Systems"},{"location":"1%20Physics/2%20Gravity/Problem_1/#practical-applications","text":"Exoplanet Detection: Measure star's wobble period to determine planet's orbital distance Satellite Deployment: Calculate geostationary orbit radius (~42,164 km) Galactic Dynamics: Estimate mass distribution in galaxies","title":"Practical Applications"},{"location":"1%20Physics/2%20Gravity/Problem_1/#limitations","text":"Perturbation Effects: Multi-body systems deviate from ideal law Relativistic Corrections: Needed for orbits close to massive objects Non-Point Masses: Tidal forces and oblateness affect orbits","title":"Limitations"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Escape Velocities and Cosmic Velocities Fundamental Concepts 1. First Cosmic Velocity (Orbital Velocity) Definition: The minimum horizontal speed required to maintain a stable circular orbit just above a celestial body's surface (ignoring atmospheric effects). Physical Meaning: Represents the balance between gravitational pull and centripetal force needed for sustained orbital motion. 2. Second Cosmic Velocity (Escape Velocity) Definition: The minimum speed needed for an object to completely break free from a celestial body's gravitational field without further propulsion. Physical Meaning: Corresponds to the kinetic energy needed to overcome gravitational potential energy at the surface. 3. Third Cosmic Velocity Definition: The minimum speed required at Earth's distance to escape the Solar System entirely. Physical Meaning: Combines Earth's escape velocity with the Sun's gravitational influence at Earth's orbital distance. Parameter Dependencies Parameter Effect on Velocities Relationship Mass (M) Increases velocities \\( \\propto \\sqrt{M} \\) Radius (R) Decreases velocities \\( \\propto 1/\\sqrt{R} \\) Altitude Reduces required velocities Non-linear decrease Comparative Analysis of Celestial Bodies Calculated Values (km/s) Body Radius (km) Mass (kg) \\( v_1 \\) \\( v_2 \\) \\( v_3 \\) Earth 6,371 5.97\u00d710\u00b2\u2074 7.91 11.19 16.65 Moon 1,737 7.34\u00d710\u00b2\u00b2 1.68 2.38 - Mars 3,390 6.39\u00d710\u00b2\u00b3 3.55 5.03 11.23 Jupiter 69,911 1.90\u00d710\u00b2\u2077 42.06 59.49 60.19 Notes: 1. \\( v_3 \\) values assume escape from body's surface followed by Solar System escape 2. Moon lacks meaningful \\( v_3 \\) as it's gravitationally bound to Earth Visualization Concepts Suggested Graphical Representations Bar Chart Comparison: X-axis: Celestial bodies Y-axis: Velocity (km/s) Grouped bars for \\( v_1 \\) , \\( v_2 \\) , and \\( v_3 \\) Velocity vs. Mass/Radius: Logarithmic plots showing scaling relationships Separate curves for each cosmic velocity Solar System Map: Plot planets with velocity requirements as size/color codes Highlight Earth-Moon-Jupiter as reference points Space Exploration Applications Practical Implications Satellite Deployment: First cosmic velocity defines minimum orbital speed Geostationary orbits require precise velocity control Planetary Missions: Mars missions must overcome Earth's \\( v_2 \\) (11.2 km/s) Gravity assists can reduce fuel requirements Interstellar Travel: Third cosmic velocity represents minimum Solar System escape Voyager probes achieved ~17 km/s (including Earth's orbital motion) Engineering Challenges Atmospheric Drag: Requires additional \u0394v over theoretical values Earth launches typically need ~9.4 km/s to reach LEO Propulsion Systems: Chemical rockets limited by Tsiolkovsky equation Alternative technologies (ion drives, light sails) for high \\( v_3 \\) Historical Context Milestone Achievements Year Mission Velocity Achieved Significance 1957 Sputnik 1 7.8 km/s First \\( v_1 \\) achievement 1959 Luna 1 11.2 km/s First \\( v_2 \\) escape 1972 Pioneer 10 16.6 km/s First \\( v_3 \\) achievement Theoretical Extensions Relativistic Considerations Near Compact Objects: General relativity modifies escape velocity near black holes Event horizon occurs where \\( v_2 \\geq c \\) Interstellar Travel: Practical missions require ~0.1c (30,000 km/s) Far exceeds conventional \\( v_3 \\) capabilities Alternative Approaches Gravity Assists: Uses planetary motion to boost velocity Voyager missions gained ~10 km/s this way Continuous Thrust: Ion engines can achieve high velocities over time Overcomes instantaneous velocity requirements","title":"Escape Velocities and Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#escape-velocities-and-cosmic-velocities","text":"","title":"Escape Velocities and Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#fundamental-concepts","text":"","title":"Fundamental Concepts"},{"location":"1%20Physics/2%20Gravity/Problem_2/#1-first-cosmic-velocity-orbital-velocity","text":"Definition: The minimum horizontal speed required to maintain a stable circular orbit just above a celestial body's surface (ignoring atmospheric effects). Physical Meaning: Represents the balance between gravitational pull and centripetal force needed for sustained orbital motion.","title":"1. First Cosmic Velocity (Orbital Velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#2-second-cosmic-velocity-escape-velocity","text":"Definition: The minimum speed needed for an object to completely break free from a celestial body's gravitational field without further propulsion. Physical Meaning: Corresponds to the kinetic energy needed to overcome gravitational potential energy at the surface.","title":"2. Second Cosmic Velocity (Escape Velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#3-third-cosmic-velocity","text":"Definition: The minimum speed required at Earth's distance to escape the Solar System entirely. Physical Meaning: Combines Earth's escape velocity with the Sun's gravitational influence at Earth's orbital distance.","title":"3. Third Cosmic Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#parameter-dependencies","text":"Parameter Effect on Velocities Relationship Mass (M) Increases velocities \\( \\propto \\sqrt{M} \\) Radius (R) Decreases velocities \\( \\propto 1/\\sqrt{R} \\) Altitude Reduces required velocities Non-linear decrease","title":"Parameter Dependencies"},{"location":"1%20Physics/2%20Gravity/Problem_2/#comparative-analysis-of-celestial-bodies","text":"","title":"Comparative Analysis of Celestial Bodies"},{"location":"1%20Physics/2%20Gravity/Problem_2/#calculated-values-kms","text":"Body Radius (km) Mass (kg) \\( v_1 \\) \\( v_2 \\) \\( v_3 \\) Earth 6,371 5.97\u00d710\u00b2\u2074 7.91 11.19 16.65 Moon 1,737 7.34\u00d710\u00b2\u00b2 1.68 2.38 - Mars 3,390 6.39\u00d710\u00b2\u00b3 3.55 5.03 11.23 Jupiter 69,911 1.90\u00d710\u00b2\u2077 42.06 59.49 60.19 Notes: 1. \\( v_3 \\) values assume escape from body's surface followed by Solar System escape 2. Moon lacks meaningful \\( v_3 \\) as it's gravitationally bound to Earth","title":"Calculated Values (km/s)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#visualization-concepts","text":"","title":"Visualization Concepts"},{"location":"1%20Physics/2%20Gravity/Problem_2/#suggested-graphical-representations","text":"Bar Chart Comparison: X-axis: Celestial bodies Y-axis: Velocity (km/s) Grouped bars for \\( v_1 \\) , \\( v_2 \\) , and \\( v_3 \\) Velocity vs. Mass/Radius: Logarithmic plots showing scaling relationships Separate curves for each cosmic velocity Solar System Map: Plot planets with velocity requirements as size/color codes Highlight Earth-Moon-Jupiter as reference points","title":"Suggested Graphical Representations"},{"location":"1%20Physics/2%20Gravity/Problem_2/#space-exploration-applications","text":"","title":"Space Exploration Applications"},{"location":"1%20Physics/2%20Gravity/Problem_2/#practical-implications","text":"Satellite Deployment: First cosmic velocity defines minimum orbital speed Geostationary orbits require precise velocity control Planetary Missions: Mars missions must overcome Earth's \\( v_2 \\) (11.2 km/s) Gravity assists can reduce fuel requirements Interstellar Travel: Third cosmic velocity represents minimum Solar System escape Voyager probes achieved ~17 km/s (including Earth's orbital motion)","title":"Practical Implications"},{"location":"1%20Physics/2%20Gravity/Problem_2/#engineering-challenges","text":"Atmospheric Drag: Requires additional \u0394v over theoretical values Earth launches typically need ~9.4 km/s to reach LEO Propulsion Systems: Chemical rockets limited by Tsiolkovsky equation Alternative technologies (ion drives, light sails) for high \\( v_3 \\)","title":"Engineering Challenges"},{"location":"1%20Physics/2%20Gravity/Problem_2/#historical-context","text":"","title":"Historical Context"},{"location":"1%20Physics/2%20Gravity/Problem_2/#milestone-achievements","text":"Year Mission Velocity Achieved Significance 1957 Sputnik 1 7.8 km/s First \\( v_1 \\) achievement 1959 Luna 1 11.2 km/s First \\( v_2 \\) escape 1972 Pioneer 10 16.6 km/s First \\( v_3 \\) achievement","title":"Milestone Achievements"},{"location":"1%20Physics/2%20Gravity/Problem_2/#theoretical-extensions","text":"","title":"Theoretical Extensions"},{"location":"1%20Physics/2%20Gravity/Problem_2/#relativistic-considerations","text":"Near Compact Objects: General relativity modifies escape velocity near black holes Event horizon occurs where \\( v_2 \\geq c \\) Interstellar Travel: Practical missions require ~0.1c (30,000 km/s) Far exceeds conventional \\( v_3 \\) capabilities","title":"Relativistic Considerations"},{"location":"1%20Physics/2%20Gravity/Problem_2/#alternative-approaches","text":"Gravity Assists: Uses planetary motion to boost velocity Voyager missions gained ~10 km/s this way Continuous Thrust: Ion engines can achieve high velocities over time Overcomes instantaneous velocity requirements","title":"Alternative Approaches"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3: Trajectories of a Freely Released Payload Near Earth Analysis of Possible Trajectories When a payload is released near Earth, its trajectory is determined by the balance between its initial velocity and Earth's gravitational pull. The possible trajectories are: Elliptical Orbit : Occurs when the payload's velocity is below escape velocity but sufficient to maintain an orbit. The shape becomes more elongated as velocity increases toward escape velocity. Circular Orbit : A special case of elliptical orbit where velocity is perfectly perpendicular to gravity with magnitude: [ v_{\\text{circ}} = \\sqrt{\\frac{GM}{r}} ] Parabolic Trajectory : Achieved exactly at escape velocity. The payload will theoretically never return. Hyperbolic Trajectory : Occurs when velocity exceeds escape velocity. The payload will escape Earth's gravitational influence entirely. Suborbital/Reentry : If velocity is insufficient for orbit, the payload follows a ballistic arc and reenters the atmosphere. Key Physics Principles Gravitational Force [ F = G \\frac{m_1 m_2}{r^2} ] - \\(G\\) : Gravitational constant - \\(m_1, m_2\\) : Masses of Earth and payload - \\(r\\) : Distance between centers Critical Velocities Circular Orbit Velocity : [ v_{\\text{circ}} = \\sqrt{\\frac{GM}{r}} ] Escape Velocity : [ v_{\\text{escape}} = \\sqrt{\\frac{2GM}{r}} ] Energy Considerations Total orbital energy determines trajectory shape: - Negative: Elliptical/Circular (bound orbit) - Zero: Parabolic (escape) - Positive: Hyperbolic (escape with excess energy) Numerical Approach (Conceptual) Equations of Motion [ \\frac{d^2 \\vec{r}}{dt^2} = -\\frac{GM}{r^3} \\vec{r} ] This second-order differential equation describes the payload's acceleration due to gravity. Implementation Steps Initial Conditions : Position: \\(\\vec{r}_0 = (R_E + h, 0)\\) Velocity: \\(\\vec{v}_0 = (v_0 \\cos \\theta, v_0 \\sin \\theta)\\) Numerical Integration (Euler method example): ```python # Pseudocode for each time step: a = -GM * r / norm(r)^3 v += a * dt r += v * dt","title":"Problem 3: Trajectories of a Freely Released Payload Near Earth"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3-trajectories-of-a-freely-released-payload-near-earth","text":"","title":"Problem 3: Trajectories of a Freely Released Payload Near Earth"},{"location":"1%20Physics/2%20Gravity/Problem_3/#analysis-of-possible-trajectories","text":"When a payload is released near Earth, its trajectory is determined by the balance between its initial velocity and Earth's gravitational pull. The possible trajectories are: Elliptical Orbit : Occurs when the payload's velocity is below escape velocity but sufficient to maintain an orbit. The shape becomes more elongated as velocity increases toward escape velocity. Circular Orbit : A special case of elliptical orbit where velocity is perfectly perpendicular to gravity with magnitude: [ v_{\\text{circ}} = \\sqrt{\\frac{GM}{r}} ] Parabolic Trajectory : Achieved exactly at escape velocity. The payload will theoretically never return. Hyperbolic Trajectory : Occurs when velocity exceeds escape velocity. The payload will escape Earth's gravitational influence entirely. Suborbital/Reentry : If velocity is insufficient for orbit, the payload follows a ballistic arc and reenters the atmosphere.","title":"Analysis of Possible Trajectories"},{"location":"1%20Physics/2%20Gravity/Problem_3/#key-physics-principles","text":"","title":"Key Physics Principles"},{"location":"1%20Physics/2%20Gravity/Problem_3/#gravitational-force","text":"[ F = G \\frac{m_1 m_2}{r^2} ] - \\(G\\) : Gravitational constant - \\(m_1, m_2\\) : Masses of Earth and payload - \\(r\\) : Distance between centers","title":"Gravitational Force"},{"location":"1%20Physics/2%20Gravity/Problem_3/#critical-velocities","text":"Circular Orbit Velocity : [ v_{\\text{circ}} = \\sqrt{\\frac{GM}{r}} ] Escape Velocity : [ v_{\\text{escape}} = \\sqrt{\\frac{2GM}{r}} ]","title":"Critical Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_3/#energy-considerations","text":"Total orbital energy determines trajectory shape: - Negative: Elliptical/Circular (bound orbit) - Zero: Parabolic (escape) - Positive: Hyperbolic (escape with excess energy)","title":"Energy Considerations"},{"location":"1%20Physics/2%20Gravity/Problem_3/#numerical-approach-conceptual","text":"","title":"Numerical Approach (Conceptual)"},{"location":"1%20Physics/2%20Gravity/Problem_3/#equations-of-motion","text":"[ \\frac{d^2 \\vec{r}}{dt^2} = -\\frac{GM}{r^3} \\vec{r} ] This second-order differential equation describes the payload's acceleration due to gravity.","title":"Equations of Motion"},{"location":"1%20Physics/2%20Gravity/Problem_3/#implementation-steps","text":"Initial Conditions : Position: \\(\\vec{r}_0 = (R_E + h, 0)\\) Velocity: \\(\\vec{v}_0 = (v_0 \\cos \\theta, v_0 \\sin \\theta)\\) Numerical Integration (Euler method example): ```python # Pseudocode for each time step: a = -GM * r / norm(r)^3 v += a * dt r += v * dt","title":"Implementation Steps"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Waves: Interference Patterns from Regular Polygon Sources Problem Statement Analyze interference patterns created by wave sources placed at the vertices of a regular polygon on a water surface. The superposition of these circular waves produces distinctive patterns of constructive and destructive interference. Wave Equation for Single Source Each point source at vertex position \\((x_i, y_i)\\) generates a circular wave described by: \\[ \\eta_i(x, y, t) = \\frac{A}{\\sqrt{r_i}} \\cdot \\cos(kr_i - \\omega t + \\phi) \\] where: - \\(r_i = \\sqrt{(x - x_i)^2 + (y - y_i)^2}\\) (distance from source \\(i\\) ) - \\(k = \\frac{2\\pi}{\\lambda}\\) (wavenumber) - \\(\\omega = 2\\pi f\\) (angular frequency) - \\(\\phi\\) = initial phase (same for all sources) Solution Methodology 1. Regular Polygon Configuration For an N-sided regular polygon with radius \\(R\\) : - Vertex positions: \\((x_i, y_i) = (R\\cos\\theta_i, R\\sin\\theta_i)\\) - \\(\\theta_i = \\frac{2\\pi i}{N}\\) for \\(i = 0,1,...,N-1\\) 2. Superposition Principle Total wave displacement at any point: \\[ \\eta_{\\text{sum}}(x, y, t) = \\sum_{i=0}^{N-1} \\frac{A}{\\sqrt{r_i}} \\cos(kr_i - \\omega t) \\] Example: Equilateral Triangle (N=3) Vertex Positions \\[ \\begin{cases} (x_0, y_0) = (R, 0) \\\\ (x_1, y_1) = (-\\frac{R}{2}, \\frac{R\\sqrt{3}}{2}) \\\\ (x_2, y_2) = (-\\frac{R}{2}, -\\frac{R\\sqrt{3}}{2}) \\end{cases} \\] Characteristic Patterns Central Region : Symmetric interference Six-fold pattern of maxima/minima Edge Regions : Complex interference fringes Directional propagation patterns Visualization Approach Spatial Map : Plot \\(|\\eta_{\\text{sum}}|\\) over a grid Color mapping for wave amplitude Time Evolution : Animate wave propagation Highlight phase relationships Key Findings Polygon Type Characteristic Pattern Notable Features Triangle (3) 6-fold symmetry Strong central interference Square (4) 8-lobed pattern Clear diagonal maxima Pentagon (5) 10-armed spiral Rotating interference bands Physical Interpretation Symmetry Effects : N sources \u2192 2N-fold interference symmetry Polygon rotation preserved in pattern Distance Decay : \\(\\frac{1}{\\sqrt{r}}\\) amplitude decay Far-field pattern simplification Deliverables Mathematical Analysis : Complete derivation of superposition Phase difference calculations Visualizations : Static interference patterns Time evolution animations Discussion : Comparison of different polygons Real-world water wave analogs","title":"Waves: Interference Patterns from Regular Polygon Sources"},{"location":"1%20Physics/3%20Waves/Problem_1/#waves-interference-patterns-from-regular-polygon-sources","text":"","title":"Waves: Interference Patterns from Regular Polygon Sources"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-statement","text":"Analyze interference patterns created by wave sources placed at the vertices of a regular polygon on a water surface. The superposition of these circular waves produces distinctive patterns of constructive and destructive interference.","title":"Problem Statement"},{"location":"1%20Physics/3%20Waves/Problem_1/#wave-equation-for-single-source","text":"Each point source at vertex position \\((x_i, y_i)\\) generates a circular wave described by: \\[ \\eta_i(x, y, t) = \\frac{A}{\\sqrt{r_i}} \\cdot \\cos(kr_i - \\omega t + \\phi) \\] where: - \\(r_i = \\sqrt{(x - x_i)^2 + (y - y_i)^2}\\) (distance from source \\(i\\) ) - \\(k = \\frac{2\\pi}{\\lambda}\\) (wavenumber) - \\(\\omega = 2\\pi f\\) (angular frequency) - \\(\\phi\\) = initial phase (same for all sources)","title":"Wave Equation for Single Source"},{"location":"1%20Physics/3%20Waves/Problem_1/#solution-methodology","text":"","title":"Solution Methodology"},{"location":"1%20Physics/3%20Waves/Problem_1/#1-regular-polygon-configuration","text":"For an N-sided regular polygon with radius \\(R\\) : - Vertex positions: \\((x_i, y_i) = (R\\cos\\theta_i, R\\sin\\theta_i)\\) - \\(\\theta_i = \\frac{2\\pi i}{N}\\) for \\(i = 0,1,...,N-1\\)","title":"1. Regular Polygon Configuration"},{"location":"1%20Physics/3%20Waves/Problem_1/#2-superposition-principle","text":"Total wave displacement at any point: \\[ \\eta_{\\text{sum}}(x, y, t) = \\sum_{i=0}^{N-1} \\frac{A}{\\sqrt{r_i}} \\cos(kr_i - \\omega t) \\]","title":"2. Superposition Principle"},{"location":"1%20Physics/3%20Waves/Problem_1/#example-equilateral-triangle-n3","text":"","title":"Example: Equilateral Triangle (N=3)"},{"location":"1%20Physics/3%20Waves/Problem_1/#vertex-positions","text":"\\[ \\begin{cases} (x_0, y_0) = (R, 0) \\\\ (x_1, y_1) = (-\\frac{R}{2}, \\frac{R\\sqrt{3}}{2}) \\\\ (x_2, y_2) = (-\\frac{R}{2}, -\\frac{R\\sqrt{3}}{2}) \\end{cases} \\]","title":"Vertex Positions"},{"location":"1%20Physics/3%20Waves/Problem_1/#characteristic-patterns","text":"Central Region : Symmetric interference Six-fold pattern of maxima/minima Edge Regions : Complex interference fringes Directional propagation patterns","title":"Characteristic Patterns"},{"location":"1%20Physics/3%20Waves/Problem_1/#visualization-approach","text":"Spatial Map : Plot \\(|\\eta_{\\text{sum}}|\\) over a grid Color mapping for wave amplitude Time Evolution : Animate wave propagation Highlight phase relationships","title":"Visualization Approach"},{"location":"1%20Physics/3%20Waves/Problem_1/#key-findings","text":"Polygon Type Characteristic Pattern Notable Features Triangle (3) 6-fold symmetry Strong central interference Square (4) 8-lobed pattern Clear diagonal maxima Pentagon (5) 10-armed spiral Rotating interference bands","title":"Key Findings"},{"location":"1%20Physics/3%20Waves/Problem_1/#physical-interpretation","text":"Symmetry Effects : N sources \u2192 2N-fold interference symmetry Polygon rotation preserved in pattern Distance Decay : \\(\\frac{1}{\\sqrt{r}}\\) amplitude decay Far-field pattern simplification","title":"Physical Interpretation"},{"location":"1%20Physics/3%20Waves/Problem_1/#deliverables","text":"Mathematical Analysis : Complete derivation of superposition Phase difference calculations Visualizations : Static interference patterns Time evolution animations Discussion : Comparison of different polygons Real-world water wave analogs","title":"Deliverables"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Lorentz Force Simulator body { font-family: Arial, sans-serif; line-height: 1.6; max-width: 900px; margin: 0 auto; padding: 20px; background-color: #f5f5f5; color: #333; } h1, h2, h3 { color: #2c3e50; } .simulation { background: white; border-radius: 8px; padding: 20px; margin: 20px 0; box-shadow: 0 2px 4px rgba(0,0,0,0.1); } canvas { background: #eee; display: block; margin: 10px auto; border: 1px solid #ccc; } .controls { display: flex; flex-wrap: wrap; gap: 15px; margin: 15px 0; } .control-group { flex: 1; min-width: 200px; } label { display: block; margin: 5px 0; font-weight: bold; } input, select { width: 100%; padding: 8px; margin-bottom: 10px; border: 1px solid #ddd; border-radius: 4px; } button { background: #3498db; color: white; border: none; padding: 10px 15px; border-radius: 4px; cursor: pointer; font-size: 16px; } button:hover { background: #2980b9; } .formula { background: #f8f9fa; padding: 10px; border-left: 4px solid #3498db; margin: 10px 0; font-family: monospace; } Lorentz Force Particle Simulator 1. Uniform Magnetic Field (Circular Motion) Particle moves in a circle when v \u22a5 B : F = q(v \u00d7 B) \u21d2 r = mv/(qB) (Larmor radius) Charge (q): Mass (m): B-field (B): Start Simulation 2. Crossed E and B Fields (Drift Motion) Particle drifts with velocity E \u00d7 B/B\u00b2 : v drift = (E \u00d7 B) / B\u00b2 E-field (E): B-field (B): Start Simulation 3. Combined E and B Fields (Complex Motion) Particle follows helical/spiral paths: F = q(E + v \u00d7 B) E-field (E): B-field (B): Start Simulation Physics Explained Key Concepts Larmor Radius (r) : Radius of circular motion in B-field. Depends on m, v, q, B. Drift Velocity : In crossed fields, particles drift perpendicular to both E and B. Helical Motion : If v has components both parallel and perpendicular to B. Applications Cyclotrons : Use uniform B-fields to accelerate particles. Mass Spectrometers : Separate ions by q/m ratio using r \u221d m/q. // Uniform B-field simulation function startUniformBSimulation() { const canvas = document.getElementById('uniformB'); const ctx = canvas.getContext('2d'); const charge = parseFloat(document.getElementById('charge').value); const mass = parseFloat(document.getElementById('mass').value); const bField = parseFloat(document.getElementById('bField').value); let x = 100, y = 150, vx = 3 * Math.abs(charge), vy = 0; const radius = Math.abs((mass * vx) / (charge * bField)) * 10; ctx.clearRect(0, 0, canvas.width, canvas.height); function animate() { ctx.clearRect(0, 0, canvas.width, canvas.height); // Draw B-field direction (into the screen) ctx.fillStyle = 'blue'; ctx.fillText('B (into screen)', 20, 20); // Draw particle ctx.beginPath(); ctx.arc(x, y, 5, 0, Math.PI * 2); ctx.fillStyle = charge < 0 ? 'red' : 'blue'; ctx.fill(); // Update position (circular motion) x = 250 + radius * Math.cos(Date.now() * 0.005 * (Math.abs(charge * bField) / mass)); y = 150 + radius * Math.sin(Date.now() * 0.005 * (Math.abs(charge * bField) / mass)); requestAnimationFrame(animate); } animate(); } // Crossed E and B fields simulation function startCrossedFieldsSimulation() { const canvas = document.getElementById('crossedFields'); const ctx = canvas.getContext('2d'); const eField = parseFloat(document.getElementById('eField').value); const bField = parseFloat(document.getElementById('bFieldCrossed').value); let x = 50, y = 150; const driftVelocity = (eField / bField) * 10; ctx.clearRect(0, 0, canvas.width, canvas.height); function animate() { ctx.clearRect(0, 0, canvas.width, canvas.height); // Draw E and B fields ctx.fillStyle = 'blue'; ctx.fillText(`E (\u2192): ${eField}`, 20, 20); ctx.fillText(`B (into screen): ${bField}`, 20, 40); // Draw particle ctx.beginPath(); ctx.arc(x, y, 5, 0, Math.PI * 2); ctx.fillStyle = 'green'; ctx.fill(); // Update position (drift + circular) x += driftVelocity * 0.05; if (x > canvas.width) x = 0; y = 150 + 30 * Math.sin(Date.now() * 0.005 * bField); requestAnimationFrame(animate); } animate(); } // Combined E and B fields simulation function startCombinedFieldsSimulation() { const canvas = document.getElementById('combinedFields'); const ctx = canvas.getContext('2d'); const eField = parseFloat(document.getElementById('eFieldCombined').value); const bField = parseFloat(document.getElementById('bFieldCombined').value); let x = 50, y = 150, z = 0; const driftVelocity = (eField / bField) * 5; ctx.clearRect(0, 0, canvas.width, canvas.height); function animate() { ctx.clearRect(0, 0, canvas.width, canvas.height); // Draw particle (projected to 2D) ctx.beginPath(); ctx.arc(x, y, 5, 0, Math.PI * 2); ctx.fillStyle = 'purple'; ctx.fill(); // Update position (complex motion) x += driftVelocity * 0.03; y = 150 + 40 * Math.sin(Date.now() * 0.003 * bField); if (x > canvas.width) x = 0; requestAnimationFrame(animate); } animate(); }","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Equivalent Resistance Using Graph Theory Motivation Calculating the equivalent resistance is a fundamental problem in electrical circuits, essential for understanding and designing efficient systems. Traditional methods, such as iteratively applying series and parallel resistor rules, can become cumbersome when dealing with complex circuits with many components. Graph theory offers a powerful alternative, allowing for a more structured and algorithmic approach to analyzing circuits. In this approach, the circuit is represented as a graph where: - Nodes correspond to junctions or connection points in the circuit. - Edges represent resistors with weights equal to their resistance values. This method simplifies even intricate networks and enables automated analysis, which is especially useful in modern applications like circuit simulation, optimization problems, and network design. Task Overview The task at hand is to calculate the equivalent resistance of a circuit using graph theory, focusing on the following: Option 1: Simplified Task \u2013 Algorithm Description We will describe the algorithm for calculating the equivalent resistance using graph theory. Provide pseudocode for the algorithm that: Identifies series and parallel connections. Iteratively reduces the graph until a single equivalent resistance is obtained. Handles nested combinations and ensures that the graph is simplified properly. Option 2: Advanced Task \u2013 Full Implementation Implement the algorithm to handle arbitrary resistor configurations, including nested series and parallel connections. Test the implementation on examples like simple series and parallel combinations, nested configurations, and complex graphs with multiple cycles. Option 1: Simplified Task \u2013 Algorithm Description Step-by-Step Explanation Input Representation : A circuit is represented as a graph \\( G(V, E) \\) , where: \\( V \\) is the set of vertices (nodes representing junctions). \\( E \\) is the set of edges (resistors) with weights corresponding to their resistance values. Identifying Series and Parallel Connections : Series Connection : If two resistors are connected end-to-end (i.e., the two nodes are directly connected without any branching in between), their resistances simply add up. Mathematically: [ R_{\\text{eq}} = R_1 + R_2 ] Parallel Connection : If two resistors are connected in parallel (i.e., both ends of the resistors are connected to the same two nodes), their equivalent resistance is calculated using the formula: [ \\frac{1}{R_{\\text{eq}}} = \\frac{1}{R_1} + \\frac{1}{R_2} ] Graph Reduction Algorithm : Detecting Series Connections : Traverse the graph and identify linear chains of resistors. These can be reduced by summing their resistance values. Detecting Parallel Connections : Identify resistors that share the same pair of nodes. Apply the parallel resistance formula to reduce them to a single equivalent resistor. Handling Nested Combinations : After reducing series or parallel combinations, the graph may still contain nested combinations. The algorithm should recursively simplify the graph, reducing it step-by-step until only a single equivalent resistance remains. Termination : The algorithm continues until the entire graph is reduced to a single node representing the total equivalent resistance.","title":"Equivalent Resistance Using Graph Theory"},{"location":"1%20Physics/5%20Circuits/Problem_1/#equivalent-resistance-using-graph-theory","text":"","title":"Equivalent Resistance Using Graph Theory"},{"location":"1%20Physics/5%20Circuits/Problem_1/#motivation","text":"Calculating the equivalent resistance is a fundamental problem in electrical circuits, essential for understanding and designing efficient systems. Traditional methods, such as iteratively applying series and parallel resistor rules, can become cumbersome when dealing with complex circuits with many components. Graph theory offers a powerful alternative, allowing for a more structured and algorithmic approach to analyzing circuits. In this approach, the circuit is represented as a graph where: - Nodes correspond to junctions or connection points in the circuit. - Edges represent resistors with weights equal to their resistance values. This method simplifies even intricate networks and enables automated analysis, which is especially useful in modern applications like circuit simulation, optimization problems, and network design.","title":"Motivation"},{"location":"1%20Physics/5%20Circuits/Problem_1/#task-overview","text":"The task at hand is to calculate the equivalent resistance of a circuit using graph theory, focusing on the following: Option 1: Simplified Task \u2013 Algorithm Description We will describe the algorithm for calculating the equivalent resistance using graph theory. Provide pseudocode for the algorithm that: Identifies series and parallel connections. Iteratively reduces the graph until a single equivalent resistance is obtained. Handles nested combinations and ensures that the graph is simplified properly. Option 2: Advanced Task \u2013 Full Implementation Implement the algorithm to handle arbitrary resistor configurations, including nested series and parallel connections. Test the implementation on examples like simple series and parallel combinations, nested configurations, and complex graphs with multiple cycles.","title":"Task Overview"},{"location":"1%20Physics/5%20Circuits/Problem_1/#option-1-simplified-task-algorithm-description","text":"","title":"Option 1: Simplified Task \u2013 Algorithm Description"},{"location":"1%20Physics/5%20Circuits/Problem_1/#step-by-step-explanation","text":"Input Representation : A circuit is represented as a graph \\( G(V, E) \\) , where: \\( V \\) is the set of vertices (nodes representing junctions). \\( E \\) is the set of edges (resistors) with weights corresponding to their resistance values. Identifying Series and Parallel Connections : Series Connection : If two resistors are connected end-to-end (i.e., the two nodes are directly connected without any branching in between), their resistances simply add up. Mathematically: [ R_{\\text{eq}} = R_1 + R_2 ] Parallel Connection : If two resistors are connected in parallel (i.e., both ends of the resistors are connected to the same two nodes), their equivalent resistance is calculated using the formula: [ \\frac{1}{R_{\\text{eq}}} = \\frac{1}{R_1} + \\frac{1}{R_2} ] Graph Reduction Algorithm : Detecting Series Connections : Traverse the graph and identify linear chains of resistors. These can be reduced by summing their resistance values. Detecting Parallel Connections : Identify resistors that share the same pair of nodes. Apply the parallel resistance formula to reduce them to a single equivalent resistor. Handling Nested Combinations : After reducing series or parallel combinations, the graph may still contain nested combinations. The algorithm should recursively simplify the graph, reducing it step-by-step until only a single equivalent resistance remains. Termination : The algorithm continues until the entire graph is reduced to a single node representing the total equivalent resistance.","title":"Step-by-Step Explanation"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Exploring the Central Limit Theorem through Simulations Motivation The Central Limit Theorem (CLT) is a cornerstone of probability and statistics, stating that the sampling distribution of the sample mean approaches a normal distribution as the sample size increases, regardless of the population\u2019s original distribution. Simulations provide an intuitive and hands-on way to observe this phenomenon in action. Task Overview 1. Simulating Sampling Distributions: Select several types of population distributions, such as: - Uniform distribution - Exponential distribution - Binomial distribution For each distribution, generate a large dataset representing the population. 2. Sampling and Visualization: Randomly sample data from the population and calculate the sample mean for different sample sizes (e.g., 5, 10, 30, 50). Repeat the process multiple times to create a sampling distribution of the sample mean. Plot histograms of the sample means for each sample size and observe the convergence to a normal distribution. 3. Parameter Exploration: Investigate how the shape of the original distribution and the sample size influence the rate of convergence to normality. Highlight the impact of the population\u2019s variance on the spread of the sampling distribution. 4. Practical Applications: Reflect on the importance of the CLT in real-world scenarios, such as: - Estimating population parameters. - Quality control in manufacturing. - Predicting outcomes in financial models. Deliverables: A Markdown document and Python scripts or notebooks implementing the simulations for various population distributions. Plots illustrating the sampling distributions and their progression toward normality. A discussion on the implications of the results and their connection to theoretical expectations. Hints and Resources: Use Python libraries such as NumPy for random number generation and Matplotlib/Seaborn for visualization. Begin with simple populations (e.g., uniform or normal) before exploring more complex distributions. Ensure students understand how to calculate and interpret the sample mean and variance. This task encourages students to explore the Central Limit Theorem through computational experiments, deepening their understanding of its significance in statistics.","title":"Exploring the Central Limit Theorem through Simulations"},{"location":"1%20Physics/6%20Statistics/Problem_1/#exploring-the-central-limit-theorem-through-simulations","text":"","title":"Exploring the Central Limit Theorem through Simulations"},{"location":"1%20Physics/6%20Statistics/Problem_1/#motivation","text":"The Central Limit Theorem (CLT) is a cornerstone of probability and statistics, stating that the sampling distribution of the sample mean approaches a normal distribution as the sample size increases, regardless of the population\u2019s original distribution. Simulations provide an intuitive and hands-on way to observe this phenomenon in action.","title":"Motivation"},{"location":"1%20Physics/6%20Statistics/Problem_1/#task-overview","text":"","title":"Task Overview"},{"location":"1%20Physics/6%20Statistics/Problem_1/#1-simulating-sampling-distributions","text":"Select several types of population distributions, such as: - Uniform distribution - Exponential distribution - Binomial distribution For each distribution, generate a large dataset representing the population.","title":"1. Simulating Sampling Distributions:"},{"location":"1%20Physics/6%20Statistics/Problem_1/#2-sampling-and-visualization","text":"Randomly sample data from the population and calculate the sample mean for different sample sizes (e.g., 5, 10, 30, 50). Repeat the process multiple times to create a sampling distribution of the sample mean. Plot histograms of the sample means for each sample size and observe the convergence to a normal distribution.","title":"2. Sampling and Visualization:"},{"location":"1%20Physics/6%20Statistics/Problem_1/#3-parameter-exploration","text":"Investigate how the shape of the original distribution and the sample size influence the rate of convergence to normality. Highlight the impact of the population\u2019s variance on the spread of the sampling distribution.","title":"3. Parameter Exploration:"},{"location":"1%20Physics/6%20Statistics/Problem_1/#4-practical-applications","text":"Reflect on the importance of the CLT in real-world scenarios, such as: - Estimating population parameters. - Quality control in manufacturing. - Predicting outcomes in financial models.","title":"4. Practical Applications:"},{"location":"1%20Physics/6%20Statistics/Problem_1/#deliverables","text":"A Markdown document and Python scripts or notebooks implementing the simulations for various population distributions. Plots illustrating the sampling distributions and their progression toward normality. A discussion on the implications of the results and their connection to theoretical expectations.","title":"Deliverables:"},{"location":"1%20Physics/6%20Statistics/Problem_1/#hints-and-resources","text":"Use Python libraries such as NumPy for random number generation and Matplotlib/Seaborn for visualization. Begin with simple populations (e.g., uniform or normal) before exploring more complex distributions. Ensure students understand how to calculate and interpret the sample mean and variance. This task encourages students to explore the Central Limit Theorem through computational experiments, deepening their understanding of its significance in statistics.","title":"Hints and Resources:"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Monte Carlo \u03c0 Estimation body { font-family: Arial, sans-serif; line-height: 1.6; max-width: 900px; margin: 0 auto; padding: 20px; background-color: #f5f5f5; color: #333; } h1, h2, h3 { color: #2c3e50; } .simulation { background: white; border-radius: 8px; padding: 20px; margin: 20px 0; box-shadow: 0 2px 4px rgba(0,0,0,0.1); } canvas { background: #eee; display: block; margin: 10px auto; border: 1px solid #ccc; } .controls { display: flex; flex-wrap: wrap; gap: 15px; margin: 15px 0; } .control-group { flex: 1; min-width: 200px; } label { display: block; margin: 5px 0; font-weight: bold; } input, select { width: 100%; padding: 8px; margin-bottom: 10px; border: 1px solid #ddd; border-radius: 4px; } button { background: #3498db; color: white; border: none; padding: 10px 15px; border-radius: 4px; cursor: pointer; font-size: 16px; } button:hover { background: #2980b9; } .formula { background: #f8f9fa; padding: 10px; border-left: 4px solid #3498db; margin: 10px 0; font-family: monospace; } .results { font-weight: bold; color: #e74c3c; } table { width: 100%; border-collapse: collapse; margin: 10px 0; } th, td { border: 1px solid #ddd; padding: 8px; text-align: left; } th { background-color: #f2f2f2; } Estimating \u03c0 Using Monte Carlo Methods Part 1: Circle-Based Method Theory For a unit circle inside a 2\u00d72 square: Area of circle = \u03c0r\u00b2 = \u03c0 (since r=1) Area of square = 4 \u21d2 \u03c0 \u2248 4 \u00d7 (points inside circle / total points) Number of Points: Run Simulation Estimated \u03c0: \u2014 Points inside: 0 / 0 Part 2: Buffon\u2019s Needle Method Theory For needles of length L and line spacing D: \u03c0 \u2248 (2 \u00d7 L \u00d7 total throws) / (D \u00d7 number of crosses) Number of Throws: Needle Length (L): Line Spacing (D): Run Simulation Estimated \u03c0: \u2014 Crosses: 0 / 0 Analysis Convergence Comparison Method Convergence Rate Computational Cost Circle ~1/\u221aN (Slow) Low (O(N)) Buffon\u2019s Needle ~1/\u221aN (Slow) Medium (O(N)) // Circle-Based Method function runCircleSimulation() { const canvas = document.getElementById('circleCanvas'); const ctx = canvas.getContext('2d'); const nPoints = parseInt(document.getElementById('circlePoints').value); const center = canvas.width / 2; const radius = canvas.width / 2 - 10; // Draw square and circle ctx.clearRect(0, 0, canvas.width, canvas.height); ctx.strokeStyle = '#000'; ctx.strokeRect(10, 10, canvas.width - 20, canvas.height - 20); ctx.beginPath(); ctx.arc(center, center, radius, 0, Math.PI * 2); ctx.stroke(); let inside = 0; for (let i = 0; i < nPoints; i++) { const x = Math.random() * (canvas.width - 20) + 10; const y = Math.random() * (canvas.height - 20) + 10; const distance = Math.sqrt((x - center) ** 2 + (y - center) ** 2); if (distance <= radius) { ctx.fillStyle = 'red'; inside++; } else { ctx.fillStyle = 'blue'; } ctx.fillRect(x - 1, y - 1, 2, 2); } const piEstimate = 4 * (inside / nPoints); document.getElementById('piEstimate').textContent = piEstimate.toFixed(6); document.getElementById('pointsInside').textContent = inside; document.getElementById('totalPoints').textContent = nPoints; } // Buffon\u2019s Needle Method function runNeedleSimulation() { const canvas = document.getElementById('needleCanvas'); const ctx = canvas.getContext('2d'); const nThrows = parseInt(document.getElementById('needleThrows').value); const L = parseFloat(document.getElementById('needleLength').value); const D = parseFloat(document.getElementById('lineSpacing').value); // Draw parallel lines ctx.clearRect(0, 0, canvas.width, canvas.height); ctx.strokeStyle = '#000'; for (let y = 20; y < canvas.height; y += D * 20) { ctx.beginPath(); ctx.moveTo(0, y); ctx.lineTo(canvas.width, y); ctx.stroke(); } let crosses = 0; for (let i = 0; i < nThrows; i++) { const x1 = Math.random() * canvas.width; const y1 = Math.random() * canvas.height; const angle = Math.random() * Math.PI; const x2 = x1 + L * 20 * Math.cos(angle); const y2 = y1 + L * 20 * Math.sin(angle); // Check for line crossings let crossed = false; for (let lineY = 20; lineY < canvas.height; lineY += D * 20) { if ((y1 < lineY && y2 >= lineY) || (y1 >= lineY && y2 < lineY)) { crossed = true; break; } } ctx.beginPath(); ctx.moveTo(x1, y1); ctx.lineTo(x2, y2); ctx.strokeStyle = crossed ? 'red' : 'blue'; ctx.stroke(); if (crossed) crosses++; } const piEstimate = (2 * L * nThrows) / (D * crosses); document.getElementById('piNeedleEstimate').textContent = isFinite(piEstimate) ? piEstimate.toFixed(6) : \"\u221e\"; document.getElementById('needleCrosses').textContent = crosses; document.getElementById('needleThrowsCount').textContent = nThrows; } Key Observations Circle Method : Simple but requires many points for accuracy (10,000+ for 2 decimal places). Buffon\u2019s Needle : Geometric constraints (L \u2264 D) improve efficiency but still slow convergence. Both methods demonstrate the \"law of large numbers\" in action.","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Pendulum Gravity Measurement body { font-family: Arial, sans-serif; line-height: 1.6; max-width: 900px; margin: 0 auto; padding: 20px; background-color: #f5f5f5; color: #333; } h1, h2, h3 { color: #2c3e50; } .simulation { background: white; border-radius: 8px; padding: 20px; margin: 20px 0; box-shadow: 0 2px 4px rgba(0,0,0,0.1); } canvas { background: #eee; display: block; margin: 10px auto; border: 1px solid #ccc; } .controls { display: flex; flex-wrap: wrap; gap: 15px; margin: 15px 0; } .control-group { flex: 1; min-width: 200px; } label { display: block; margin: 5px 0; font-weight: bold; } input, select { width: 100%; padding: 8px; margin-bottom: 10px; border: 1px solid #ddd; border-radius: 4px; } button { background: #3498db; color: white; border: none; padding: 10px 15px; border-radius: 4px; cursor: pointer; font-size: 16px; } button:hover { background: #2980b9; } .formula { background: #f8f9fa; padding: 10px; border-left: 4px solid #3498db; margin: 10px 0; font-family: monospace; } .results { font-weight: bold; color: #e74c3c; } table { width: 100%; border-collapse: collapse; margin: 10px 0; } th, td { border: 1px solid #ddd; padding: 8px; text-align: left; } th { background-color: #f2f2f2; } #pendulumCanvas { background: #fff; } Measuring Earth's Gravitational Acceleration ( g ) with a Pendulum Procedure Materials String (1\u20131.5 m) Small weight (e.g., keys, coin bag) Stopwatch (smartphone timer) Ruler (resolution: \u00b10.5 cm) Setup Attach weight to string and fix to a support. Measure pendulum length L (suspension point to center of mass). Pendulum Length L (m): Uncertainty \u0394 L (m): Start Oscillations Stop Data Collection Measure time for 10 oscillations ( T 10 ), repeat 10 times: Time for 10 Oscillations (s): Add Data Trial T 10 (s) Calculate g Results Period: T = T 10 /10 Gravity: g = 4\u03c0\u00b2 L / T \u00b2 Uncertainty: \u0394 g = g \u00d7 \u221a[(\u0394 L / L )\u00b2 + (2\u0394 T / T )\u00b2] Mean T 10 : \u2014 \u00b1 \u2014 s Period T : \u2014 \u00b1 \u2014 s Calculated g : \u2014 \u00b1 \u2014 m/s\u00b2 Standard g : 9.81 m/s\u00b2 | Error: \u2014 % Analysis Uncertainty Sources \u0394 L : Ruler resolution (\u00b10.5 cm). \u0394 T : Reaction time and stopwatch precision. Discussion Compare your result with 9.81 m/s\u00b2. Key factors affecting accuracy: Air resistance (neglected in simple pendulum theory). Amplitude (should be < 15\u00b0 for simple harmonic motion). String mass and weight distribution. // Pendulum Animation let pendulumInterval; const canvas = document.getElementById('pendulumCanvas'); const ctx = canvas.getContext('2d'); let angle = 0.2; // Small initial angle (<15\u00b0) let angularVelocity = 0; const damping = 0.995; // Simulate air resistance function drawPendulum() { const length = parseFloat(document.getElementById('pendulumLength').value) * 100; const pivotX = canvas.width / 2; const pivotY = 50; const bobX = pivotX + length * Math.sin(angle); const bobY = pivotY + length * Math.cos(angle); ctx.clearRect(0, 0, canvas.width, canvas.height); // Draw string ctx.beginPath(); ctx.moveTo(pivotX, pivotY); ctx.lineTo(bobX, bobY); ctx.stroke(); // Draw bob ctx.beginPath(); ctx.arc(bobX, bobY, 15, 0, Math.PI * 2); ctx.fillStyle = '#3498db'; ctx.fill(); } function updatePendulum() { const L = parseFloat(document.getElementById('pendulumLength').value); const g = 9.81; const angularAcceleration = -g / L * Math.sin(angle); angularVelocity += angularAcceleration * 0.05; angularVelocity *= damping; angle += angularVelocity * 0.05; drawPendulum(); } function startPendulum() { if (pendulumInterval) clearInterval(pendulumInterval); angle = 0.2; pendulumInterval = setInterval(updatePendulum, 20); } function stopPendulum() { clearInterval(pendulumInterval); } // Data Analysis const timeData = []; function addTimeData() { const time = parseFloat(document.getElementById('timeInput').value); if (isNaN(time)) return; timeData.push(time); updateTimeTable(); document.getElementById('timeInput').value = ''; } function updateTimeTable() { const tableBody = document.querySelector('#timeDataTable tbody'); tableBody.innerHTML = ''; timeData.forEach((time, index) => { const row = document.createElement('tr'); row.innerHTML = `<td>${index + 1}</td><td>${time.toFixed(2)}</td>`; tableBody.appendChild(row); }); } function calculateResults() { if (timeData.length === 0) return; const L = parseFloat(document.getElementById('pendulumLength').value); const deltaL = parseFloat(document.getElementById('lengthUncertainty').value); // Calculate mean and standard deviation of T10 const meanT10 = timeData.reduce((sum, val) => sum + val, 0) / timeData.length; const stdT10 = Math.sqrt(timeData.reduce((sum, val) => sum + Math.pow(val - meanT10, 2), 0) / timeData.length); const deltaT10 = stdT10 / Math.sqrt(timeData.length); // Calculate period T and its uncertainty const T = meanT10 / 10; const deltaT = deltaT10 / 10; // Calculate g and its uncertainty const g = 4 * Math.PI ** 2 * L / T ** 2; const deltaG = g * Math.sqrt((deltaL / L) ** 2 + (2 * deltaT / T) ** 2); // Update results document.getElementById('meanT10').textContent = meanT10.toFixed(2); document.getElementById('deltaT10').textContent = deltaT10.toFixed(2); document.getElementById('periodT').textContent = T.toFixed(3); document.getElementById('deltaT').textContent = deltaT.toFixed(3); document.getElementById('gValue').textContent = g.toFixed(2); document.getElementById('deltaG').textContent = deltaG.toFixed(2); const error = Math.abs((g - 9.81) / 9.81 * 100); document.getElementById('errorG').textContent = error.toFixed(1); } // Initialize drawPendulum();","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}